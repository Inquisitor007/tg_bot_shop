version: "3.9"

services:
  bot:
    build:
      context: .
      dockerfile: Dockerfile.bot
    env_file:
      - .env
    volumes:
      - media_files:/app/admin_panel/media
      - ./orders_data:/app/orders_data
    command: python3 -m tg_bot
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      admin_panel:
        condition: service_started

  admin_panel:
    build:
      context: .
      dockerfile: Dockerfile.admin_panel
    env_file:
      - .env
    volumes:
      - media_files:/app/admin_panel/media
    ports:
      - "8000:8000"
    command: >
      sh -c "python admin_panel/manage.py makemigrations &&
             python admin_panel/manage.py migrate &&
             python admin_panel/create_superuser.py &&
             python admin_panel/manage.py runserver 0.0.0.0:8000
             "

    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
  celery:
    build:
      context: .
      dockerfile: Dockerfile.admin_panel
    env_file:
      - .env
    command: celery -A admin_panel.project worker
    depends_on:
      redis:
        condition: service_healthy
      admin_panel:
        condition: service_started


  postgres:
    image: postgres:16.2-alpine3.19
    env_file:
      - .env
    volumes:
      - pg-data:/var/lib/postgresql/data
      - ./init_db:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped

  redis:
    image: redis:7.2.4
    ports:
      - "6379:6379"
    restart: always
    environment:
      ALLOW_EMPTY_PASSWORD: yes
    healthcheck:
      test: redis-cli ping
      interval: 1s
      timeout: 3s
      retries: 30
    volumes:
      - redis-data:/data

volumes:
  pg-data:
  redis-data:
  media_files: